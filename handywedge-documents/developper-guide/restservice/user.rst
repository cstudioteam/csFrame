ユーザー管理機能
==================
.. index::
   single: ログイン
   single: ログアウト
   single: 認証トークン
   single: パスワード
   single: ロール別ACLテーブル


フレームワークは、ユーザー登録、及びユーザー仮登録機能を提供する。

ユーザー登録、ユーザー仮登録は、要求パラメータ（後述するパラメータ設定「pre_register」参照）により切替えを行う。
ユーザー仮登録要求を行うことにより、ユーザー仮登録処理後、対象アカウント（ユーザー）に本登録用URLをメール通知する。

「 :ref:`user-interim` 」、及び「 :ref:`user-regist` 」のシーケンスを次に示す。

.. seqdiag::
   :name: seq-user-regist

   seqdiag {
      span_height = 20;
              ユーザー; RESTクライアント; RESTフィルタ; ユーザー仮登録API; ユーザー本登録API;

      === ユーザー仮登録 ===
      RESTクライアント -> RESTフィルタ [label = "1. ユーザー仮登録要求(POST)"];
      RESTフィルタ  -> ユーザー仮登録API [label = "2. ユーザー仮登録要求"];
              ユーザー仮登録API -> ユーザー仮登録API [label = "3. ユーザー仮登録処理"];
               ユーザー仮登録API ->> ユーザー [label = "4. メール（本登録URL）"];
      RESTフィルタ  <-- ユーザー仮登録API;
      RESTクライアント <-- RESTフィルタ [label = "レスポンス"];

      === ユーザー本登録 ===
              ユーザー  -> ユーザー仮登録API [label = "5. ユーザー本登録要求（GET）", leftnote = "メール記載の本登録用URLをクリック"];
              ユーザー仮登録API -> ユーザー仮登録API [label = "6. ユーザー本登録処理"];
              ユーザー  <-- ユーザー仮登録API;

              ユーザー [shape = actor]
      RESTクライアント [color=pink]
              ユーザー仮登録API [color=pink]
              ユーザー本登録API [color=pink]
      RESTフィルタ [color=palegreen]
   }

----

.. _user-interim:

------------------
ユーザー仮登録
------------------
ユーザー登録をする際に、一旦仮登録として登録されたメールアドレスに本登録用のURLを送信することで、ユーザーの確認を行うことでメールアドレスの入力間違いや、
悪意のある第三者によるユーザ登録を防ぐことができる。

使用方法
----------
本機能はJSON形式POSTリクエストにより実行する。

インターフェース
~~~~~~~~~~~~~~~~~~

:URL（エンドポイント）:
   /fw/rest/api/user
:メソッド:
   POST

送受信サンプル
~~~~~~~~~~~~~~~~

 リクエスト:

 .. code-block:: text

   {"id":"user001","password":"hogehoge"}


 レスポンス:

 .. code-block:: json

   {"return_cd":0}


ヘッダー
~~~~~~~~~~
.. csv-table::
   :widths: 20 30 50
   :header: "項目名", "値", "詳細"

   "Content-Type", "application/json", "必須。"


パラメーター
~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "id", "string", "必須。"
   "password", "string", "必須。"
   "pre_register", "int", "任意。省略するか、1より大きい値だと仮登録状態となる。仮登録を繰り返した場合は最後に発行されたトークンのみ有効。"
   "mail_address", "string", "仮登録の場合は必須。本登録用のURLがメールで通知される。"


戻り値（正常時）
~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "正常終了は0固定。"


戻り値（例外時）
~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "負の値。"
   "return_msg", "string", ""


例外内容
~~~~~~~~~~~
.. csv-table::
   :widths: 10 45 45
   :header: "return_cd", "return_msg", "内容"

   "-9000", "予期しないエラーが発生しました。サーバー管理者に確認して下さい。エラーメッセージ[値]", "予期しないエラーが発生。値には例外インスタンスから取得したメッセージ。"
   "-9004", "パラメータのユーザーIDもしくはパスワードがありません。", "リクエストパラメータが不足。"
   "-9005", "パラメータのユーザーIDが長すぎます。文字数は128文字以下にしてください。", "ユーザーIDが規定長を超えている。"
   "-9006", "パラメータのユーザーIDは既に存在します。", "重複したユーザーIDの登録。"
   "-9013", "仮登録の場合はメールアドレスは必須です。", "仮登録の場合でメールアドレスが無い。"


.. _user-regist:

------------------
ユーザー本登録
------------------
フレームワークは、「 :ref:`user-interim` 」で仮登録したユーザーを本登録する機能を提供する。
ユーザー仮登録にて発行されたメール本文に記載の本登録用URLリンク押下により実行。

使用方法
------------
本機能はGETリクエストにより実行する。

インターフェース
~~~~~~~~~~~~~~~~~~
:URL（エンドポイント）:
   /fw/rest/api/user/actual
:メソッド:
   GET

送受信サンプル
~~~~~~~~~~~~~~~~~~
 リクエスト:

 .. code-block:: text

   /fw/rest/api/user/actual?token=b82b19c4080736fae2b55aec62a509c5


 レスポンス:

 .. code-block:: json

   {"return_cd":0}


ヘッダー
~~~~~~~~~~
.. csv-table::
   :widths: 20 30 50
   :header: "項目名", "値", "詳細"

   "なし", "", ""


パラメーター（クエリストリング）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "token", "string", "必須。"


戻り値（正常時）
~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "正常終了は0固定。"
   "token", "string", ""


戻り値（例外時）
~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "負の値。"
   "return_msg", "string", ""

例外内容
~~~~~~~~~~~~
.. csv-table::
   :widths: 10 45 45
   :header: "return_cd", "return_msg", "内容"

   "-9000", "予期しないエラーが発生しました。サーバー管理者に確認して下さい。エラーメッセージ[値]", "予期しないエラーが発生。値には例外インスタンスから取得したメッセージ。"
   "-9010", "データが存在しないトークンです。", "リクエストのトークンが存在しない。"
   "-9011", "有効期限の切れたトークンです。再度やり直して下さい。", "既定の期間が過ぎた無効な仮登録トークン。"
   "-9012", "既に本登録されている仮登録トークンです。", "本登録が済んでいる仮登録トークン。"
   "-9014", "トークンがありません。", "トークンパラメータが無い。"


.. _password-reset-token:

--------------------------------
パスワード初期化トークン通知
--------------------------------
フレームワークは、パスワード初期化を行うためのパスワード初期化トークンを発行する機能を提供する。
パスワード初期化トークン発行要求を行うことにより、トークン発行処理後、対象アカウント（ユーザー）に初期化用URLをメール通知する。

以下に「 :ref:`password-reset-token` 」、及び「 :ref:`password_reset` 」のシーケンスを示す。

.. seqdiag::
   :name: seq-pswd-reset-token

   seqdiag {
      span_height = 20;
              ユーザー; RESTクライアント; RESTフィルタ; ユーザー仮登録API; ユーザー本登録API;

      === ユーザー仮登録 ===
      RESTクライアント -> RESTフィルタ [label = "1. ユーザー仮登録要求(POST)"];
      RESTフィルタ  -> ユーザー仮登録API [label = "2. ユーザー仮登録要求"];
              ユーザー仮登録API -> ユーザー仮登録API [label = "3. ユーザー仮登録処理"];
               ユーザー仮登録API ->> ユーザー [label = "4. メール（本登録URL）"];
      RESTフィルタ  <-- ユーザー仮登録API;
      RESTクライアント <-- RESTフィルタ [label = "レスポンス"];

      === ユーザー本登録 ===
              ユーザー  -> ユーザー仮登録API [label = "5. ユーザー本登録要求（GET）", leftnote = "メール記載の本登録用URLをクリック"];
              ユーザー仮登録API -> ユーザー仮登録API [label = "6. ユーザー本登録処理"];
              ユーザー  <-- ユーザー仮登録API;

              ユーザー [shape = actor]
      RESTクライアント [color=pink]
              ユーザー仮登録API [color=pink]
              ユーザー本登録API [color=pink]
      RESTフィルタ [color=palegreen]
   }

----

使用方法
-----------
本機能はPOSTリクエストにより実行する。

インターフェース
~~~~~~~~~~~~~~~~~~~
:URL（エンドポイント）:
   /fw/rest/api/user/password/reset
:メソッド:
   POST

送受信サンプル
~~~~~~~~~~~~~~~~~~
 リクエスト:

 .. code-block:: json

   {"id":"inte-rest-api"}


 レスポンス:

 .. code-block:: json

   {"return_cd":0}


ヘッダー
~~~~~~~~~~
.. csv-table::
   :widths: 20 30 50
   :header: "項目名", "値", "詳細"

   "なし", "", ""


パラメーター
~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "id", "string", "必須。"


戻り値（正常時）
~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "正常終了は0固定。"
   "token", "string", ""


戻り値（例外時）
~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "負の値。"
   "return_msg", "string", ""


例外内容
~~~~~~~~~~~~
.. csv-table::
   :widths: 10 45 45
   :header: "return_cd", "return_msg", "内容"

   "-9000", "予期しないエラーが発生しました。サーバー管理者に確認して下さい。エラーメッセージ[値]", "予期しないエラーが発生。値には例外インスタンスから取得したメッセージ。"
   "-9015", "パラメータのユーザーIDがありません。", "パラメータのユーザーIDが無い。"


.. _password_reset:

---------------------
パスワード初期化
---------------------
フレームワークは、「 :ref:`password-reset-token` 」により発行されたトークンを用いパスワードを初期化する機能を提供する。
パスワード初期化トークン通知にて発行されたメール本文に記載のパスワード初期化用URLリンク押下により実行。

使用方法
------------
本機能はGETリクエストにより実行する。

インターフェース
~~~~~~~~~~~~~~~~~~~
:URL（エンドポイント）:
   /fw/rest/api/user/password/reset
:メソッド:
   GET

送受信サンプル
~~~~~~~~~~~~~~~~~~
 リクエスト:

 .. code-block:: text

   /fw/rest/api/user/password/reset?token=b82b19c4080736fae2b55aec62a509c5

 レスポンス:

 .. code-block:: json

   {"return_cd":0}


ヘッダー
~~~~~~~~~~~
.. csv-table::
   :widths: 20 30 50
   :header: "項目名", "値", "詳細"

   "なし", "", ""

パラメーター（クエリーストリング）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "token", "string", "必須。"


戻り値（正常時）
~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "正常終了は0固定。"

戻り値（例外時）
~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "負の値。"
   "return_msg", "string", ""

例外内容
~~~~~~~~~~~~~~
.. csv-table::
   :widths: 10 45 45
   :header: "return_cd", "return_msg", "内容"

   "-9000", "予期しないエラーが発生しました。サーバー管理者に確認して下さい。エラーメッセージ[値]", "予期しないエラーが発生。値には例外インスタンスから取得したメッセージ。"
   "-9010", "データが存在しないトークンです。", "リクエストのトークンが存在しない。"
   "-9011", "有効期限の切れたトークンです。再度やり直して下さい。", "既定の期間が過ぎた無効なトークン。"
   "-9014", "トークンがありません。", "トークンパラメータが無い。"


.. _password-change:

------------------
パスワード変更
------------------
フレームワークは、パスワード変更機能を提供する。
本機能を利用する際、事前に「 :ref:`token-issue` 」で発行したトークンを必要とする。

使用方法
------------
本機能はJSON形式PUTリクエストにより実行する。

インターフェース
~~~~~~~~~~~~~~~~~~~
:URL（エンドポイント）:
   /fw/rest/api/user/password
:メソッド:
   PUT

送受信サンプル
~~~~~~~~~~~~~~~~~~
 リクエスト:

 .. code-block:: json

   {"new_password":"hogehoge", "current_password":"fugafuga"}


 レスポンス:

 .. code-block:: json

   {"return_cd":0}


ヘッダー
~~~~~~~~~~~
.. csv-table::
   :widths: 20 30 50
   :header: "項目名", "値", "詳細"

   "Authorization", "Bearer token", "必須。tokenはログインAPIで発行されたtoken。Bearerとtokenの間は半角スペース1つ。"

パラメーター
~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "current_password", "string", "必須。変更前の現在のパスワード。"
   "new_password", "string", "必須。新しいパスワード。"


戻り値（正常時）
~~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "正常終了は0固定。"

戻り値（例外時）
~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 25 15 60
   :header: "項目名", "型", "詳細"

   "return_cd", "int", "負の値。"
   "return_msg", "string", ""

例外内容
~~~~~~~~~~~~~~
.. csv-table::
   :widths: 10 45 45
   :header: "return_cd", "return_msg", "内容"

   "-9000", "予期しないエラーが発生しました。サーバー管理者に確認して下さい。エラーメッセージ[値]", "予期しないエラーが発生。値には例外インスタンスから取得したメッセージ。"
   "-9007", "パラメータの現在のパスワードもしくは変更後のパスワードがありません。", "リクエストパラメータが不足。"
   "-9008", "現在のパスワードが一致しません。パスワードを確認して下さい。", "現在のパスワードが一致しない。"


----------------------------
ロールによるアクセス制御
----------------------------
フレームワークは、ユーザー毎のロールに応じたURLアクセス制御機能を提供する。
ログイン中のユーザーがリクエストされたURLに対してアクセスする権限があるか否かをフィルターにて判断する。
アクセスする権限がない場合は、403エラーを返す。

使用方法
--------
判定にはフレームワークが管理する[ロール別ACLテーブル]に登録されたデータを使用。ロール別ACLのデータ定義がない場合は本機能を使用しないものと判断する。（常にTRUEの扱い）
ロール別ACLのデータ定義がある場合は、ユーザー情報ロールの設定は必須であり、URLアクセス制御機能を使用する状態を意味する。
ロール別ACLのデータ定義があり、ユーザー情報ロールが未定義の場合、アクセス不可の判定となる。

ロール別ACLテーブル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. csv-table::
   :widths: 20 20 60
   :header: "項目名", "型", "詳細"

   "ロール", "string", "ユーザー情報に紐付くロールコード"
   "URLパターン", "string", "アクセス可能なURLパターン。コンテキストパス以降を設定。正規表現にて定義可。"

 
